# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt
      - run:
          name: Run tests
          command: pytest
  build-and-dockerhub: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.6
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build
          command: docker build -t django_p13:latest .
      - run:
          name: Login
          command: docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
      - run:
          name: Link
          command: docker tag django_p13:latest $DOCKERHUB_USERNAME/django_p13:$CIRCLE_SHA1
      - run:
          name: push
          command: docker push $DOCKERHUB_USERNAME/django_p13:$CIRCLE_SHA1

  push-heroku:
    machine: true
    steps:
      - checkout
      - run:
          name: Setup Heroku
          command: curl https://cli-assets.heroku.com/install.sh | sh # run a script to set up Heroku
      - run:
          name: Build and push Docker image to Heroku
          command: |
            lambda=$HEROKU_API_KEY heroku container:login
            lambda=$HEROKU_API_KEY heroku container:push -a $HEROKU_APP_NAME web
            lambda=$HEROKU_API_KEY heroku container:release -a $HEROKU_APP_NAME web
      - run:
          name: Migrate database
          command: |
            lambda=$HEROKU_API_KEY heroku run python manage.py migrate -a $HEROKU_APP_NAME

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build and test image: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test
      - build-and-dockerhub:
          context: django_p13_context
          requires:
          - test
          filters:
            branches:
                only: main
      - push-heroku:
          context: django_p13_context
          filters:
            branches:
              only: main
          requires:
            - build-and-dockerhub